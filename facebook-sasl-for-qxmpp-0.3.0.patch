diff --git src/QXmppConfiguration.cpp src/QXmppConfiguration.cpp
index b47b387..ad4aa3c 100644
--- src/QXmppConfiguration.cpp
+++ src/QXmppConfiguration.cpp
@@ -125,6 +125,21 @@ void QXmppConfiguration::setResource(const QString& resource)
     m_resource = resource;
 }
 
+void QXmppConfiguration::setFacebookAppId(const QString& appId)
+{
+    m_appId = appId;
+}
+
+void QXmppConfiguration::setFacebookAccessToken(const QString& accessToken)
+{
+    m_accessToken = accessToken;
+}
+
+void QXmppConfiguration::setFacebookAppSecret(const QString& appSecret)
+{
+    m_appSecret = appSecret;
+}
+
 /// Sets the JID. If a full JID (i.e. one with a resource) is given, calling
 /// this method will update the username, domain and resource. Otherwise, only
 /// the username and the domain will be updated.
@@ -200,6 +215,21 @@ QString QXmppConfiguration::resource() const
     return m_resource;
 }
 
+QString QXmppConfiguration::facebookAppId() const
+{
+    return m_appId;
+}
+
+QString QXmppConfiguration::facebookAccessToken() const
+{
+    return m_accessToken;
+}
+
+QString QXmppConfiguration::facebookAppSecret() const
+{
+    return m_appSecret;
+}
+
 /// Returns the jabber id (jid).
 ///
 /// \return jabber id (jid)
diff --git src/QXmppConfiguration.h src/QXmppConfiguration.h
index f99b98f..c7ed00b 100644
--- src/QXmppConfiguration.h
+++ src/QXmppConfiguration.h
@@ -70,7 +70,8 @@ public:
     {
         SASLPlain = 0,  ///< Plain
         SASLDigestMD5,  ///< Digest MD5 (default)
-        SASLAnonymous   ///< Anonymous
+        SASLAnonymous,  ///< Anonymous
+        SASLXFacebook
     };
 
     /// An enumeration for stream compression methods.
@@ -100,6 +101,15 @@ public:
     QString resource() const;
     void setResource(const QString&);
 
+    QString facebookAppId() const;
+    void setFacebookAppId(const QString&);
+
+    QString facebookAccessToken() const;
+    void setFacebookAccessToken(const QString&);
+
+    QString facebookAppSecret() const;
+    void setFacebookAppSecret(const QString&);
+
     QString jid() const;
     void setJid(const QString &jid);
 
@@ -169,6 +179,11 @@ private:
     QString m_domain;
     QString m_resource;
 
+    // Facebook
+    QString m_appId;
+    QString m_accessToken;
+    QString m_appSecret;
+
     // default is false
     bool m_autoAcceptSubscriptions;
     // default is true
diff --git src/QXmppOutgoingClient.cpp src/QXmppOutgoingClient.cpp
index 0c2af46..5e2ef8d 100644
--- src/QXmppOutgoingClient.cpp
+++ src/QXmppOutgoingClient.cpp
@@ -339,6 +339,9 @@ void QXmppOutgoingClient::handleStanza(const QDomElement &nodeRecv)
             case QXmppConfiguration::SASLAnonymous:
                 sendData("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='ANONYMOUS'/>");
                 break;
+            case QXmppConfiguration::SASLXFacebook:
+                sendData("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='X-FACEBOOK-PLATFORM'/>");
+                break;
             }
         }
 
@@ -383,18 +386,28 @@ void QXmppOutgoingClient::handleStanza(const QDomElement &nodeRecv)
         else if(nodeRecv.tagName() == "challenge")
         {
             // TODO: Track which mechanism was used for when other SASL protocols which use challenges are supported
-            d->saslStep++;
-            switch (d->saslStep)
+            QXmppConfiguration::SASLAuthMechanism mechanism = configuration().sASLAuthMechanism();
+            switch(mechanism)
             {
-            case 1 :
-                sendAuthDigestMD5ResponseStep1(nodeRecv.text());
-                break;
-            case 2 :
-                sendAuthDigestMD5ResponseStep2(nodeRecv.text());
+            case QXmppConfiguration::SASLDigestMD5:
+                d->saslStep++;
+                switch (d->saslStep)
+                {
+                case 1 :
+                    sendAuthDigestMD5ResponseStep1(nodeRecv.text());
+                    break;
+                case 2 :
+                    sendAuthDigestMD5ResponseStep2(nodeRecv.text());
+                    break;
+                default :
+                    warning("Too many authentication steps");
+                    disconnectFromHost();
+                    break;
+                }
+            case QXmppConfiguration::SASLXFacebook:
+                sendAuthXFacebookResponse(nodeRecv.text());
                 break;
-            default :
-                warning("Too many authentication steps");
-                disconnectFromHost();
+            default:
                 break;
             }
         }
@@ -666,6 +679,33 @@ void QXmppOutgoingClient::sendAuthDigestMD5ResponseStep2(const QString &challeng
     sendData("<response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>");
 }
 
+void QXmppOutgoingClient::sendAuthXFacebookResponse(const QString& challenge)
+{
+    QByteArray ba = QByteArray::fromBase64(challenge.toAscii());
+    QMap<QByteArray, QByteArray> map = QXmppSaslXFacebook::parseMessage(ba);
+
+    if (!map.contains("nonce"))
+    {
+        warning("sendAuthXFacebookResponse: Invalid input");
+        disconnectFromHost();
+        return;
+    }
+
+    // Build response
+    QMap<QByteArray, QByteArray> response;
+    response["api_key"] = configuration().facebookAppId().toUtf8();
+    response["call_id"] = QXmppSaslXFacebook::generateCallId();
+    response["method"] = map.value("method");
+    response["nonce"] = map.value("nonce");
+    response["access_token"] = configuration().facebookAccessToken().toUtf8();
+    response["v"] = "1.0";
+
+    const QByteArray data = QXmppSaslXFacebook::serializeMessage(response, configuration().facebookAppSecret().toUtf8());
+    QByteArray packet = "<response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>"
+                        + data.toBase64() + "</response>";
+    sendData(packet);
+}
+
 void QXmppOutgoingClient::sendNonSASLAuth(bool plainText)
 {
     QXmppNonSASLAuthIq authQuery;
diff --git src/QXmppOutgoingClient.h src/QXmppOutgoingClient.h
index adb3650..1a6ad12 100644
--- src/QXmppOutgoingClient.h
+++ src/QXmppOutgoingClient.h
@@ -98,6 +98,7 @@ private slots:
 private:
     void sendAuthDigestMD5ResponseStep1(const QString& challenge);
     void sendAuthDigestMD5ResponseStep2(const QString& challenge);
+    void sendAuthXFacebookResponse(const QString& challenge);
     void sendNonSASLAuth(bool plaintext);
     void sendNonSASLAuthQuery();
 
diff --git src/QXmppSaslAuth.cpp src/QXmppSaslAuth.cpp
index c40ff1a..14005a1 100644
--- src/QXmppSaslAuth.cpp
+++ src/QXmppSaslAuth.cpp
@@ -25,6 +25,7 @@
 #include <cstdlib>
 
 #include <QCryptographicHash>
+#include <QDateTime>
 
 #include "QXmppSaslAuth.h"
 #include "QXmppUtils.h"
@@ -234,3 +235,41 @@ QByteArray QXmppSaslDigestMd5::serializeMessage(const QMap<QByteArray, QByteArra
     return ba;
 }
 
+QByteArray QXmppSaslXFacebook::generateCallId()
+{
+    return QString("%1").arg(QDateTime::currentMSecsSinceEpoch()).toUtf8();
+}
+
+// message parsing and serialization
+QMap<QByteArray, QByteArray> QXmppSaslXFacebook::parseMessage(const QByteArray &ba)
+{
+    QMap<QByteArray, QByteArray> map;
+    const QList<QByteArray> args = ba.split('&');
+
+    foreach (const QByteArray &arg, args) {
+        const QList<QByteArray> keyAndValue = arg.split('=');
+        map[keyAndValue.at(0)] = keyAndValue.at(1);
+    }
+
+    return map;
+}
+
+QByteArray QXmppSaslXFacebook::serializeMessage(const QMap<QByteArray, QByteArray> &map, const QByteArray &secret)
+{
+    QByteArray ba;
+    QByteArray sig;
+    foreach (const QByteArray &key, map.keys())
+    {
+        if (!ba.isEmpty())
+            ba.append('&');
+
+        const QString insertString = key + "=" + map[key];
+        ba.append(insertString);
+        sig.append(insertString);
+    }
+    sig.append(secret);
+    sig = QCryptographicHash::hash(sig, QCryptographicHash::Md5).toHex();
+    ba.append("&sig=");
+    ba.append(sig);
+    return ba;
+}
diff --git src/QXmppSaslAuth.h src/QXmppSaslAuth.h
index affc5d4..8362eaf 100644
--- src/QXmppSaslAuth.h
+++ src/QXmppSaslAuth.h
@@ -77,4 +77,14 @@ private:
     QByteArray m_password;
 };
 
+class QXmppSaslXFacebook
+{
+public:
+    static QByteArray generateCallId();
+
+    // message parsing and serialization
+    static QMap<QByteArray, QByteArray> parseMessage(const QByteArray &ba);
+    static QByteArray serializeMessage(const QMap<QByteArray, QByteArray> &map, const QByteArray &secret);
+};
+
 #endif
diff --git src/QXmppStreamFeatures.cpp src/QXmppStreamFeatures.cpp
index e8f57b2..e475cd6 100644
--- src/QXmppStreamFeatures.cpp
+++ src/QXmppStreamFeatures.cpp
@@ -147,6 +147,8 @@ void QXmppStreamFeatures::parse(const QDomElement &element)
                 m_authMechanisms << QXmppConfiguration::SASLDigestMD5;
             else if (subElement.text() == QLatin1String("ANONYMOUS"))
                 m_authMechanisms << QXmppConfiguration::SASLAnonymous;
+            else if (subElement.text() == QLatin1String("X-FACEBOOK-PLATFORM"))
+                m_authMechanisms << QXmppConfiguration::SASLXFacebook;
             subElement = subElement.nextSiblingElement("mechanism");
         }
     }
@@ -207,6 +209,9 @@ void QXmppStreamFeatures::toXml(QXmlStreamWriter *writer) const
             case QXmppConfiguration::SASLAnonymous:
                 writer->writeCharacters("ANONYMOUS");
                 break;
+            case QXmppConfiguration::SASLXFacebook:
+                writer->writeCharacters("X-FACEBOOK-PLATFORM");
+                break;
             }
             writer->writeEndElement();
         }
